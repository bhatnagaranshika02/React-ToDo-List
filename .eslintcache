[{"C:\\Users\\dilip\\programming\\react\\todolist\\React-ToDoList\\src\\index.js":"1","C:\\Users\\dilip\\programming\\react\\todolist\\React-ToDoList\\src\\App.js":"2"},{"size":221,"mtime":1608375897485,"results":"3","hashOfConfig":"4"},{"size":3656,"mtime":1608377104461,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"luprmf",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\dilip\\programming\\react\\todolist\\React-ToDoList\\src\\index.js",[],["12","13"],"C:\\Users\\dilip\\programming\\react\\todolist\\React-ToDoList\\src\\App.js",["14"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: \"\",\n      list: []\n    };\n  }\n\n  //incorporating local storage \n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse the localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  updateInput(key, value) {\n    // update react state\n    this.setState({ [key]: value });\n  }\n\n  addItem() {\n    // create a new item with unique id\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n \n    };\n\n    // copy current list of items\n    const list = [...this.state.list];\n\n    // add the new item to the list\n    list.push(newItem);\n\n    // update state with new list, reset the new item input\n    this.setState({\n      list,\n      newItem: \"\"\n    });\n  }\n\n  deleteItem(id) {\n    // copy current list of items\n    const list = [...this.state.list];\n    // filter out the item being deleted\n    const updatedList = list.filter(item => item.id !== id);\n\n    this.setState({ list: updatedList });\n  }\n  \n  render() {\n    return (\n      <div>\n\n      <h1 className=\"app-title\"><u>Swing a cup of coffee and prepare your TO-DO List.</u></h1>\n        \n        <div className=\"container\">\n        <div\n          style={{\n            padding: 30,\n            textAlign: \"left\",\n            maxWidth: 500,\n            margin: \"auto\"\n          }}\n        >\n          <b><i>What do you wanna do today ??</i></b>\n          <br />\n          <input class=\"text-field\"\n            type=\"text\"\n            placeholder=\"Typing....\"\n            value={this.state.newItem}\n            onChange={e => this.updateInput(\"newItem\", e.target.value)}\n          ></input>\n\n          &nbsp; &nbsp;\n\n          <button\n            className=\"add-btn btn-floating\"\n            onClick={() => this.addItem()}\n            disabled={!this.state.newItem.length}\n          >\n            <i class=\"material-icons\"> + </i>\n          </button>\n          <br /> <br />\n          <ul>\n            {this.state.list.map(item => {\n              return (\n                <li key={item.id}>\n                  {item.value}\n                  <button className=\"btn btn-floating\" onClick={() => this.deleteItem(item.id)}>\n                    <i class=\"material-icons\">x</i>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":2,"column":8,"nodeType":"21","messageId":"22","endLine":2,"endColumn":16},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]